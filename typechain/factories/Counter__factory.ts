/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "CountedTo",
    type: "event",
  },
  {
    inputs: [],
    name: "countDown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countUp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    name: "getTokenReserves",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    name: "getUniswapV2PairAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260008055735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006957600080fd5b50610c2c806100796000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630bd8599e1461005c5780635fcbd5b61461007a578063a87d942c14610098578063cdbfb016146100b6578063d95b28bd146100e8575b600080fd5b610064610118565b604051610071919061098e565b60405180910390f35b6100826101fb565b60405161008f919061098e565b60405180910390f35b6100a06102de565b6040516100ad919061098e565b60405180910390f35b6100d060048036038101906100cb91906107b2565b6102e7565b6040516100df939291906109a9565b60405180910390f35b61010260048036038101906100fd91906107b2565b610473565b60405161010f91906108da565b60405180910390f35b600061015b6040518060400160405280601081526020017f636f756e7455703a20636f756e74203d00000000000000000000000000000000815250600054610538565b6000600160005461016c91906109fc565b905060005481116101b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a99061096e565b60405180910390fd5b806000819055507fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e676000546040516101ea919061098e565b60405180910390a160005491505090565b600061023e6040518060400160405280601281526020017f636f756e74446f776e3a20636f756e74203d0000000000000000000000000000815250600054610538565b6000600160005461024f9190610a52565b90506000548110610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c9061094e565b60405180910390fd5b806000819055507fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e676000546040516102cd919061098e565b60405180910390a160005491505090565b60008054905090565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390587876040518363ffffffff1660e01b815260040161034a9291906108f5565b60206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610789565b90506103a5816105d4565b60008060008373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156103f057600080fd5b505afa158015610404573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042891906107ee565b63ffffffff1692506dffffffffffffffffffffffffffff1692506dffffffffffffffffffffffffffff16925061045f83838361066d565b828282965096509650505050509250925092565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b81526004016104d39291906108f5565b60206040518083038186803b1580156104eb57600080fd5b505afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190610789565b905061052e816105d4565b8091505092915050565b6105d0828260405160240161054e92919061091e565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061070c565b5050565b61066a816040516024016105e891906108da565b6040516020818303038152906040527f2c2ecbc2000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061070c565b50565b610707838383604051602401610685939291906109a9565b6040516020818303038152906040527fe7820a74000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061070c565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b60008135905061074481610bb1565b92915050565b60008151905061075981610bb1565b92915050565b60008151905061076e81610bc8565b92915050565b60008151905061078381610bdf565b92915050565b60006020828403121561079b57600080fd5b60006107a98482850161074a565b91505092915050565b600080604083850312156107c557600080fd5b60006107d385828601610735565b92505060206107e485828601610735565b9150509250929050565b60008060006060848603121561080357600080fd5b60006108118682870161075f565b93505060206108228682870161075f565b925050604061083386828701610774565b9150509250925092565b61084681610a86565b82525050565b6000610857826109e0565b61086181856109eb565b9350610871818560208601610aec565b61087a81610b4e565b840191505092915050565b60006108926011836109eb565b915061089d82610b5f565b602082019050919050565b60006108b56010836109eb565b91506108c082610b88565b602082019050919050565b6108d481610ad2565b82525050565b60006020820190506108ef600083018461083d565b92915050565b600060408201905061090a600083018561083d565b610917602083018461083d565b9392505050565b60006040820190508181036000830152610938818561084c565b905061094760208301846108cb565b9392505050565b6000602082019050818103600083015261096781610885565b9050919050565b60006020820190508181036000830152610987816108a8565b9050919050565b60006020820190506109a360008301846108cb565b92915050565b60006060820190506109be60008301866108cb565b6109cb60208301856108cb565b6109d860408301846108cb565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000610a0782610ad2565b9150610a1283610ad2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a4757610a46610b1f565b5b828201905092915050565b6000610a5d82610ad2565b9150610a6883610ad2565b925082821015610a7b57610a7a610b1f565b5b828203905092915050565b6000610a9182610ab2565b9050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60005b83811015610b0a578082015181840152602081019050610aef565b83811115610b19576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f55696e7432353620756e646572666c6f77000000000000000000000000000000600082015250565b7f55696e74323536206f766572666c6f7700000000000000000000000000000000600082015250565b610bba81610a86565b8114610bc557600080fd5b50565b610bd181610a98565b8114610bdc57600080fd5b50565b610be881610adc565b8114610bf357600080fd5b5056fea2646970667358221220df1f29aef5f92335ac48a8ecc9a0fb820373d68e19a00dbd79c27d4af0bc690364736f6c63430008030033";

export class Counter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
