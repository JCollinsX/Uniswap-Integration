/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CounterInterface extends ethers.utils.Interface {
  functions: {
    "countDown()": FunctionFragment;
    "countUp()": FunctionFragment;
    "getCount()": FunctionFragment;
    "getTokenReserves(address,address)": FunctionFragment;
    "getUniswapV2PairAddress(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "countDown", values?: undefined): string;
  encodeFunctionData(functionFragment: "countUp", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenReserves",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV2PairAddress",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "countDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "countUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV2PairAddress",
    data: BytesLike
  ): Result;

  events: {
    "CountedTo(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CountedTo"): EventFragment;
}

export type CountedToEvent = TypedEvent<[BigNumber] & { number: BigNumber }>;

export class Counter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CounterInterface;

  functions: {
    countDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenReserves(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUniswapV2PairAddress(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;
  };

  countDown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countUp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenReserves(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getUniswapV2PairAddress(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  callStatic: {
    countDown(overrides?: CallOverrides): Promise<BigNumber>;

    countUp(overrides?: CallOverrides): Promise<BigNumber>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenReserves(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getUniswapV2PairAddress(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;
  };

  filters: {
    "CountedTo(uint256)"(
      number?: null
    ): TypedEventFilter<[BigNumber], { number: BigNumber }>;

    CountedTo(
      number?: null
    ): TypedEventFilter<[BigNumber], { number: BigNumber }>;
  };

  estimateGas: {
    countDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenReserves(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapV2PairAddress(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    countDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenReserves(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapV2PairAddress(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
